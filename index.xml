<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Mudox </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Sat, 08 Nov 2014 22:33:51 CST</updated>
    
    <item>
      <title>SETUP MY ARCH LINUX ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_archlinux_environment/</link>
      <pubDate>Sat, 08 Nov 2014 22:33:51 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_archlinux_environment/</guid>
      <description>

&lt;p&gt;The marason of installing &amp;amp; tunning the Arch Linux to my flavor.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Mouse acceleration&lt;/h1&gt;

&lt;p&gt;Type &lt;code&gt;xset q | grep Pointer&lt;/code&gt; to see current mouse acceleration setting.&lt;/p&gt;

&lt;p&gt;Try &lt;code&gt;xset m &amp;lt;acceleration&amp;gt; &amp;lt;threshold&amp;gt;&lt;/code&gt; with different values to find the best
combination for your feeling.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;where acceleration defines how many times faster the cursor will move than
the default speed. threshold is the velocity required for acceleration to
become effective, usually measured in device units per 10ms. acceleration can
be a fraction, so if you want to slow down the mouse you can use &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;, &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;,
&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;, &amp;hellip; if you want to make it faster you can use &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1&lt;/sub&gt;, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Threshold defines the point at which acceleration should occur in pixels per
10 ms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found my lucky combiantion is &lt;code&gt;1/4 8&lt;/code&gt; and I add the setting command into
&lt;em&gt;rc.lua&lt;/em&gt; of &lt;a href=&#34;http://awesome.naquadah.org&#34;&gt;Awesome WM&lt;/a&gt; to apply the setting on each startup.&lt;/p&gt;

&lt;p&gt;reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Mouse_acceleration&#34;&gt;Mouse acceleration from ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Input Method&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;ibus + isbus-rime&lt;/strong&gt; combinations works nicely on my Arch Linux.&lt;/p&gt;

&lt;p&gt;After ibus gets installed, run &lt;code&gt;ibus-setup&lt;/code&gt;, it will show a setting guide
window where you can adjust ibus settings to adapt to &lt;a href=&#34;awesome&#34;&gt;Awesome WM&lt;/a&gt;
environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I prefer to change the keyboard shortcut of switching to next input method to
&lt;code&gt;&amp;lt;Atl&amp;gt;&amp;lt;Shift&amp;gt;space&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check off the &lt;em&gt;Embed preedit text in application window&lt;/em&gt; option, because I
found it does not run properly in some applications (e.g. Vim).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On  environments, ibus-daemon can not be loaded automatically on
startup, so we need to manually run it. There are many ways to auto-start
applications on linux platform, I choose to let &lt;a href=&#34;awesome&#34;&gt;Awesome WM&lt;/a&gt; to start it by adding
auto-start code in &lt;em&gt;rc.lua&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For ibus-rime, it is in tranditional chinese mode by default. To switch to
simplified chinese mode, press &lt;code&gt;Ctrl-~&lt;/code&gt; when ibus-rime is active to open setup
candiate menu and choose &lt;em&gt;朙月拼音-简化字&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S ibus ibus-qt ibus-rime

ibus-setup

# manually staRt ibus daemon for this session.
# this command has been added in my Awesome config file &#39;rc.lua&#39; to auto-start
# it in the beginning of each Awesome session.
ibus-daemon -drx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Ibus&#34;&gt;IBus from ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Window Manager&lt;/h1&gt;

&lt;p&gt;On Linux platforms, I prefer WMs to DEs.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://awesome.naquadah.org&#34;&gt;Awesome WM&lt;/a&gt; is my favorite window manager.&lt;/p&gt;

&lt;p&gt;see &lt;a href=&#34;/memo/setup_my_aweseome_wm_environment/&#34;&gt;SETUP MY AWESOME WM ENVIRONMENT&lt;/a&gt;
for details.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Shell Environment&lt;/h1&gt;

&lt;p&gt;I have used several terminal emulators (gnome-terminal, xvrt &amp;hellip;), and finally
I settled myself on &lt;strong&gt;xterm&lt;/strong&gt;, which I feel it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;consume the smallest resource among other terminal emulators.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;starts up very fast.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is much more robust.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;is the standard shell for the X Window System, which bring a great
compatiblity.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As to shells, I become a &lt;strong&gt;zsh&lt;/strong&gt; fan soon after played with it as well as
bash &amp;amp; fish shells. the reason is obvious:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;it is powerfull than bash, whose syntax is completely covered by zsh.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;it provides more flexibility in configuration than fish shell.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;there already exist quite a many user contributed resources on the net, e.g:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;on-my-zsh&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/zsh-users/antigen&#34;&gt;antigen&lt;/a&gt; plugin manager.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Pull down dot-files repo&lt;/h2&gt;

&lt;p&gt;My configuration resource related to termianl emulator &amp;amp; shells are managed in
a github repo &amp;ndash; &lt;a href=&#34;https://github.com/Mudox/dot-files.git&#34;&gt;dot-files&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/Git # ~/Git is the place I assemble most of my github repos.
git clone https://github.com/Mudox/dot-files.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Setup xterm&lt;/h2&gt;

&lt;p&gt;First, install xterm from Arch Linux&amp;rsquo;s official repository.&lt;/p&gt;

&lt;p&gt;Then, link out the .Xresources file from my &lt;a href=&#34;https://github.com/Mudox/dot-files.git&#34;&gt;dot-files&lt;/a&gt; repo. It is
the configuration file that hold my xterm settings (colors, cursors, fonts
etc.) among other x utility setttings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S xterm
cd ~
ln -sf Git/dot-files/Xresources .Xresources
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Setup zsh&lt;/h2&gt;

&lt;p&gt;see &lt;a href=&#34;/memo/setup_my_zsh_environment/&#34;&gt;SETUP MY ZSH ENVIRONMENTS&lt;/a&gt; for details.&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Setup Virtualbox&lt;/h1&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Installing virutalbox&lt;/h2&gt;

&lt;p&gt;First, from the official repository, install &lt;em&gt;vitualbox&lt;/em&gt; package, which comes
with &lt;em&gt;virtualbox-host-modules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then we need to add the basic &lt;strong&gt;vboxdrv&lt;/strong&gt; kernel module to host kernel.&lt;/p&gt;

&lt;p&gt;Finally, add my user name to the &lt;strong&gt;vboxusers&lt;/strong&gt; group in order to use USB port in
virtual machines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S virtualbox

# manually add vboxdrv to host kernel for one time.
sudo modeprobe vboxdrv

# auto-load vboxdrv on every system startup.
sudo echo &#39;vboxdrv&#39; &amp;gt; /etc/modules-load.d/virtualbox.conf

# add user name in vboxusers group to use USB ports in vitual machines.
sudo gpasswd -a &amp;quot;${USER}&amp;quot; vboxusers
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;Confiuring virtualbox&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set &lt;em&gt;Host Key Combination&lt;/em&gt; to &lt;code&gt;right &amp;lt;winkey&amp;gt;&lt;/code&gt; which is consistent with
&lt;a href=&#34;awesome&#34;&gt;Awesome WM&lt;/a&gt;&amp;rsquo;s keyboads shortcuts, it&amp;rsquo;s in
&lt;em&gt;File-&amp;gt;Preference-&amp;gt;Input-&amp;gt;Virtual Machine&lt;/em&gt; of &lt;em&gt;Oracle VM VitualBox Manager&lt;/em&gt;
window.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enalbe &lt;em&gt;Bidiretional clipboard&lt;/em&gt;, it&amp;rsquo;s in &lt;em&gt;Devices-&amp;gt;Shared
Clipboard-&amp;gt;Bidirectional&lt;/em&gt; of virtual machine window.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Virtualbox&#34;&gt;Virtualbox from ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Kernel_modules&#34;&gt;kernel_modules from ArchWiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_10&#34;&gt;VPN&lt;/h1&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;Setup pptpclient&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;install pptpclient from the official repository of Arch Linux.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use &lt;code&gt;pptpsetup&lt;/code&gt; command to register my VPN account, you need to collect the
following information in advance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VPN server&amp;rsquo;s &lt;em&gt;ip address&lt;/em&gt; from your VPN provider.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;user name&lt;/em&gt; of your VPN account.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;user password&lt;/em&gt; of your VPN account.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;install &lt;code&gt;ppp-mppe&lt;/code&gt; (i.e. Microsoft Pointer-to-Pointer Encryption), if the
&lt;code&gt;pptpsetup&lt;/code&gt; command complains about &lt;em&gt;MPPE&lt;/em&gt; module things.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;test configuration&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;use &lt;code&gt;pon &amp;lt;tunnel_name&amp;gt; debug dump logfd 2 nodetach&lt;/code&gt; to test the
configuration. If everything has been configured correctly, the command
should not terminate. &lt;code&gt;Ctrl-C&lt;/code&gt; to quit it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;type &lt;code&gt;ip addr show&lt;/code&gt;, and you will see a new device &lt;strong&gt;ppp0&lt;/strong&gt; is listed in.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;connect VPN using &lt;code&gt;sudo pon &amp;lt;tunnel_name&amp;gt;&lt;/code&gt;, &lt;code&gt;sudo poff &amp;lt;tunnel_name&amp;gt;&lt;/code&gt; to
tear down.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install pptpclient
sudo pacman -S pptpclient

# add you VPN account (i.e. create a new tunnel)
sudo pptpsetup \
  --create &amp;lt;tunnel_name_whatever_you_like&amp;gt; \
  --server &amp;lt;your_VPN_server_ip_address&amp;gt; \
  --username &amp;lt;username_of_you_VPN_account&amp;gt; \
  --password &amp;lt;password_of_you_VPN_account&amp;gt; \
  --encrypt

# install ppp-mppe, if the command above complains about lacking of `MPPE`
# module things. reun `pptpsetup` command above after installing it.
sudo pacman -S ppp-mppe

# test 1, the command should not terminate if everything is okay.
sudo pon &amp;lt;tunnel_name_above&amp;gt; debug dump logfd 2 nodetach

# test 2, you would see `ppp0` listed in the output.
ip addr show

# finally, connect!
sudo pon &amp;lt;tunnel_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Route all traffic through VPN connection&lt;/h2&gt;

&lt;h3 id=&#34;toc_13&#34;&gt;Manually&lt;/h3&gt;

&lt;p&gt;Use the powerfull &lt;code&gt;ip&lt;/code&gt; command to add a route rule into route table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make all packages go through interface ppp0
ip route add default dev ppp0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This route rule is only effective during this ppp session. after your tear down
the VPN connection by &lt;code&gt;sudo pon &amp;lt;tunnel_name&amp;gt;&lt;/code&gt;, it will vanish.&lt;/p&gt;

&lt;h3 id=&#34;toc_14&#34;&gt;Automatically&lt;/h3&gt;

&lt;p&gt;Every executable scripts under /etc/ppp/ip-up.d/ will be called when a VPN
connection startup. Hence, we can use it to automatically set route rules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /etc/ppp/ip-up.d/01-routes.sh
# ----------------------------------------
#!/bin/bash

# This script is called with the following arguments:
# Arg Name
# $1 Interface name
# $2 The tty
# $3 The link speed
# $4 Local IP number
# $5 Peer IP number
# $6 Optional ``ipparam&#39;&#39; value foo

ip route add default via $4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /etc/ppp/ip-up.d
echo &#39;ip route add default via $4&#39; &amp;gt; 01-routes.sh

# the script file need to have `x` permission to be run.
# it&#39;s stdin &amp;amp; stderr will be redirected off terminal, so not output will
# be shown when run.
sudo chmod +x /etc/ppp/ip-up.d/01-routes.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_15&#34;&gt;Modify DNS server list&lt;/h2&gt;

&lt;p&gt;If you found you still can not access some site (e.g. youtube, twitter, etc.)
after establishing the VPN connection, then you should insert &lt;code&gt;servername
8.8.8.8&lt;/code&gt; ahead of existing lines in &lt;em&gt;/etc/resolve.conf&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /etc/resolve.conf
# ----------------------------------------
nameserver 8.8.8.8
nameserver 192.168.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_16&#34;&gt;&lt;del&gt;Automate the DNS modification process by /etc/ppp/ip-[up/down].d/*.sh&lt;/del&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOTE: for unknown reason, I failed following this way to achieve the
automation, the &lt;code&gt;/etc/ppp/ip-up.d/00-dns.sh&lt;/code&gt; did run, but it just did not move
files. Since it is the mechanism provided by &lt;code&gt;ppp&lt;/code&gt; thus IMO, it is the standard
way that you should try first&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whenever you tear down a VPN connection and get back to the local connection,
using the local DNS server may provide better connection speed. So, there comes
the need to restore &lt;code&gt;/etc/resolv.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By using &lt;em&gt;/etc/ppp/ip-up.d/00-dns.sh&lt;/em&gt; and &lt;em&gt;/etc/ppp/ip-down.d/00-dns.sh&lt;/em&gt;, which
automatically substitutes &lt;em&gt;/etc/ppp/resolv.conf&lt;/em&gt; with &lt;em&gt;/etc/resolv.conf&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;put your VPN specific resolv.conf under &lt;em&gt;/etc/ppp/&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add &lt;code&gt;export USEPEERSDNS=1&lt;/code&gt; into &lt;em&gt;~/.profile&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;toc_17&#34;&gt;My hacky way&lt;/h3&gt;

&lt;p&gt;I wrote a script to get around of this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ~/.bin/vpn.sh
# ----------------------------------------
#!/bin/sh

tunnel=&amp;quot;your configured tunnel name&amp;quot;

if [ &amp;quot;$#&amp;quot; -ne 1 ]; then
  echo &amp;quot;usage: $0 [on|off]&amp;quot;
  exit 1
fi

case &amp;quot;$1&amp;quot; in
  on )
    # connect
    pon ${tunnel} || exit 1

    # here we just overwrite the /etc/resolv.conf by `echo`ing the hard
    # written DNS list to it.
    printf &amp;quot;nameserver 8.8.8.8\nnameserver 192.168.0.1&amp;quot; &amp;gt; /etc/resolv.conf || exit 1
    ;;
  off )
    # disconnect
    poff ${tunnel}

    # some as above, we just `echo` back.
    echo &#39;nameserver 192.168.0.1&#39; &amp;gt; /etc/resolv.conf || exit 1
    ;;
  * )
    echo &amp;quot;usage: $0 [on|off]&amp;quot;
    ;;
esac

unset tunnel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in your .bashrc or .zshrc file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias vpon=&#39;sudo ~/.bin/vpn.sh on&#39;
alias vpoff=&#39;sudo ~/.bin/vpn.sh off&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then, you can type &lt;code&gt;vpon&lt;/code&gt; to turn on the VPN, and &lt;code&gt;vpoff&lt;/code&gt; to shutdown.&lt;/p&gt;

&lt;p&gt;reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/PPTP_VPN_client_setup_with_pptpclient&#34;&gt;PPTP VPN client setup with pptpclient&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY VIM ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_vim_environment/</link>
      <pubDate>Sat, 08 Nov 2014 17:40:55 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_vim_environment/</guid>
      <description>

&lt;p&gt;It is the Vim that bring we into the fantastic OSS world. Fiddling with it is
full of surprise and happy.&lt;/p&gt;

&lt;p&gt;Below records my steps of setting up my Vim environment after every system
re-installation.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Installing Vim&lt;/h1&gt;

&lt;p&gt;my vim config have be tested on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows XP and above.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mac OSX 10.9 and above using &lt;a href=&#34;https://github.com/b4winckler/macvim&#34;&gt;MacVim&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arch Linux.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: currently I prefer to GUI version than terminal version, hence most
of my confiurations are tailored to GUI environments.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Setup My Vim-Config Repo&lt;/h1&gt;

&lt;p&gt;First pull down my &lt;a href=&#34;https://github.com/Mudox/vim-config&#34;&gt;vim-config&lt;/a&gt; repo from github.&lt;/p&gt;

&lt;p&gt;Then create a directory named &lt;em&gt;neobundle&lt;/em&gt; under the pulled down repo, which
will holds almost all vim plugins that will be synced by &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt;
later.&lt;/p&gt;

&lt;p&gt;Create the initial &lt;em&gt;cur_mode&lt;/em&gt; file under &lt;em&gt;.vim/chameleon/&lt;/em&gt;, which always stores
the chameleon mode of next vim session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# On Widnows, Must Be Put In C:/Documents And Settings/&amp;lt;User Name&amp;gt;/Vimfiles
git clone https://github.com/Mudox/vim-config.git ~/.vim

cd .vim
mkdir neobundle

cd chameleon
echo &#39;all&#39; &amp;gt; cur_mode
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Install Prerequisites Vim Plugins&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Install &lt;a href=&#34;https://github.com/Mudox/vim-chameleon&#34;&gt;vim-chameleon&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Mudox/vim-chameleon&#34;&gt;vim-chameleon&lt;/a&gt; is my own plugin for managing massive and ever
growing vim &amp;amp; vim plugin configurations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.vim/neobundle
# NOTE: The Renaming Is Important
git clone https://github.com/Mudox/vim-chameleon chameleon
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Install &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt; is a sophisticated vim plugin manager that I have been
using for a long time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.vim/neobundle
# NOTE: The Renaming Is Important
git clone https://github.com/Shougo/neobundle.vim neobundle
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Install &amp;amp; compile &lt;a href=&#34;https://github.com/Shougo/vimproc.vim&#34;&gt;vimproc&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/vimproc.vim&#34;&gt;vimproc&lt;/a&gt; is another plugin written by &lt;a href=&#34;https://github.com/Shougo&#34;&gt;Shougo&lt;/a&gt; that is very
useful, and is requred by &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt;. The point is that you need to
compile it to get a dynamic library after pulling down its&amp;rsquo; repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/.vim/neobundle
# NOTE: The Renaming Is Important
git clone https://github.com/Shougo/vimproc.vim vimproc

cd vimproc
make # see vimproc/README.md for compilation commands for various platforms.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Run vim to see all other 140+ plugins get installed.&lt;/h2&gt;

&lt;p&gt;You can run vim in terminals or open gVim. Better run vim in terminal to watch
the plugins installing progress and spot any errors clearly.&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Vim Environment For Specific Use Case&lt;/h1&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Web Developing&lt;/h2&gt;

&lt;p&gt;Node.js (and NPM which comes with it) is the essentials of everything below.&lt;/p&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;HTML&lt;/h3&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;I use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/jshint/jshint&#34;&gt;jshint&lt;/a&gt; &amp;amp;
&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;eshint&lt;/a&gt; &amp;amp;
&lt;a href=&#34;https://github.com/douglascrockford/JSLint.git&#34;&gt;jslint&lt;/a&gt; for &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt;
checkers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/beautify-web/js-beautify&#34;&gt;js-beautify&lt;/a&gt; to prettify
JavaScript code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm intall jshint -g
npm install jslint -g
npm install eslint -g
npm install js-beautify -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;CSS&lt;/h3&gt;

&lt;p&gt;I use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/CSSLint/csslint&#34;&gt;csslint&lt;/a&gt; for &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt; checkers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/csscomb/csscomb.js&#34;&gt;csscomb.js&lt;/a&gt; for CSS code prettifier.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm intall csslint -g
npm install csscomb -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Python Scripting&lt;/h2&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;Lua Scripting&lt;/h2&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Go Scripting&lt;/h2&gt;

&lt;h2 id=&#34;toc_15&#34;&gt;C/C++ Coding&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>ERROR COLLECTION - JAVASCRIPT</title>
      <link>http://localhost:1313/memo/error_collection_javascript/</link>
      <pubDate>Fri, 07 Nov 2014 09:24:33 CST</pubDate>
      
      <guid>http://localhost:1313/memo/error_collection_javascript/</guid>
      <description>&lt;p&gt;Errors that I collected day by day when writing the JavaScript language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when assign a function to a event property, appending &lt;code&gt;()&lt;/code&gt; to the function name.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;window.onload = init/*()*/

function init() {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;appending &lt;code&gt;()&lt;/code&gt; to a property name.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var x = Math.floor(Math.random() * canvas.width/*()*/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ERROR COLLECTION - BASH</title>
      <link>http://localhost:1313/memo/error_collection_sh/</link>
      <pubDate>Fri, 07 Nov 2014 09:24:33 CST</pubDate>
      
      <guid>http://localhost:1313/memo/error_collection_sh/</guid>
      <description>&lt;p&gt;Errors that I collected day by day, when writing the Bash scripting language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Body of &lt;code&gt;select&lt;/code&gt; constructs need a &lt;code&gt;break;&lt;/code&gt; to quit the selection loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;select answer in #choices#; do
  #body#
  break; # &amp;lt;- go out of selection loop.
done
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always &lt;code&gt;source&lt;/code&gt; before testing a updated command.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Whence quoted with &lt;code&gt;&amp;quot;&lt;/code&gt;, which is the most case, use the &lt;code&gt;@&lt;/code&gt; form (i.e.
&lt;code&gt;&amp;quot;${ARRAY[@]}&amp;quot;&lt;/code&gt;) to expand a array correctly. The &lt;code&gt;*&lt;/code&gt; form will make the
expanded string as a &lt;strong&gt;single word&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY ZSH ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_zsh_environment/</link>
      <pubDate>Wed, 05 Nov 2014 09:34:11 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_zsh_environment/</guid>
      <description>

&lt;p&gt;Steps of setting up zsh environment on my systems (Arch Linux, MacOS,
Windows/Cygwin).&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;the &lt;code&gt;z&lt;/code&gt; command&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;the &lt;code&gt;fzf&lt;/code&gt; command&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY AWESOME WM ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_aweseome_wm_environment/</link>
      <pubDate>Wed, 05 Nov 2014 09:28:07 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_aweseome_wm_environment/</guid>
      <description>

&lt;p&gt;Awesome WM let you maniplate system windows like using Vim, besides its
bleeding fast window UI rendering &amp;amp; switching speed on *nix platform I&amp;rsquo;ve ever
seen.&lt;/p&gt;

&lt;p&gt;Below records my steps of setting up the Awesome window manager on my Arch
Linux progressively.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Installing Awesome Packages&lt;/h1&gt;

&lt;p&gt;The awesome package is in the official repository of Arch Linux.&lt;/p&gt;

&lt;p&gt;Better install Xephyr for testing cases.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S awesome xorg-xephyr
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Pulling Down My Awesome-Config Repository&lt;/h1&gt;

&lt;p&gt;The pulled down repo must be put in ~/.config/awesome, where awesome will
correctly load the configuration resources.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/.config # if .config does not exist before.
cd ~/.config
git clone https://github.com/Mudox/awesome-config.git awesome
cd awesome
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SETUP MY CYGWIN ENVIRONMENT</title>
      <link>http://localhost:1313/memo/setup_my_cygwin_environment/</link>
      <pubDate>Wed, 05 Nov 2014 09:26:59 CST</pubDate>
      
      <guid>http://localhost:1313/memo/setup_my_cygwin_environment/</guid>
      <description>

&lt;p&gt;Cygwin &amp;ndash; bring *nix command line user experence (paritially though) and
efficiency onto Windows.
Below is the steps of setting up the Cygwin environment on my Windows.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Why Cygwin over other tools.&lt;/h1&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Setup Cygwin&lt;/h1&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Cygwin path remapping&lt;/h2&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;mintty setting&lt;/h2&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;color&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;mintty color palette&lt;/h3&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;ls_color&lt;/h3&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;colorful manpage&lt;/h3&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;colout&lt;/h3&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;encoding&lt;/h2&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;other settings&lt;/h2&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;Shell environment setup&lt;/h2&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Cygwin package manager&lt;/h2&gt;

&lt;h1 id=&#34;toc_13&#34;&gt;Cygwin Using Tips&lt;/h1&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Working with gVim of Windows&lt;/h2&gt;

&lt;p&gt;Most of the time, I prefer gui version of Vim than terminal version for it
being free of various shackles of terminal emulator, such as key confliction,
color presentation limit, UI rendering efficiency limit, etc.&lt;/p&gt;

&lt;p&gt;First make sure a gVim instance already exists outside of Cygwin.&lt;/p&gt;

&lt;p&gt;When I need to handle off some files to gVim for Windows, I can use &lt;code&gt;--remote&lt;/code&gt;
(type &lt;code&gt;:h clientserver&lt;/code&gt; in gVim for details) command families, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias gvim=&#39;/c/Program Files/Vim/vim74/gvim.exe&#39;

gvim --remote-tab /path/of/file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will open the file in new tab of an already running gVim instance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ABOUT MY SITE</title>
      <link>http://localhost:1313/post/about_my_site/</link>
      <pubDate>Wed, 05 Nov 2014 09:26:28 CST</pubDate>
      
      <guid>http://localhost:1313/post/about_my_site/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Acknowledgements&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A Fast and Flexible Static Site Generator built with love by spf13 in GoLang.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;&lt;a href=&#34;https://github.com/spf13/hyde.git&#34;&gt;Hyde&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Hyde is a brazen two-column hugo theme based on the Jekyll theme of the same
name. It pairs a prominent sidebar with uncomplicated content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;&lt;a href=&#34;http://jquery.com/&#34;&gt;JQuery&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;jQuery is a fast, small, and feature-rich JavaScript library. It makes things
like HTML document traversal and manipulation, event handling, animation, and
Ajax much simpler with an easy-to-use API that works across a multitude of
browsers. With a combination of versatility and extensibility, jQuery has
changed the way that millions of people write JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;&lt;a href=&#34;https://github.com/isagalaev/highlight.js.git&#34;&gt;Highlight.js&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Highlight.js is a syntax highlighter written in JavaScript. It works in the
browser as well as on the server. It works with pretty much any markup,
doesn&amp;rsquo;t depend on any framework and has automatic language detection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;&lt;a href=&#34;http://www.nodejs.org/&#34;&gt;Node.js&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Node.js® is a platform built on Chrome&amp;rsquo;s JavaScript runtime for easily
building fast, scalable network applications. Node.js uses an event-driven,
non-blocking I/O model that makes it lightweight and efficient, perfect for
data-intensive real-time applications that run across distributed devices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;&lt;a href=&#34;http://bower.io/&#34;&gt;Bower&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A package manager for the web.&lt;/p&gt;

&lt;p&gt;Bower works by fetching and installing packages from all over, taking care of
hunting, finding, downloading, and saving the stuff you’re looking for. Bower
keeps track of these packages in a manifest file, bower.json. How you use
packages is up to you. Bower provides hooks to facilitate using packages in
your tools and workflows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;&lt;a href=&#34;http://www.goat1000.com/tagcanvas.php&#34;&gt;TagCanvas&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;TagCanvas is a Javascript class which will draw and animate a HTML5 canvas
based tag cloud.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;&lt;a href=&#34;https://github.com/VincentGarreau/particles.js&#34;&gt;particles.js&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A lightweight JavaScript library for creating particles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;&lt;a href=&#34;http://www.vim.org&#34;&gt;Vim&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;the editor.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>MY VIM CUSTOMIZATION POLICY</title>
      <link>http://localhost:1313/memo/my_vim_customization_policy/</link>
      <pubDate>Thu, 30 Oct 2014 10:15:08 CST</pubDate>
      
      <guid>http://localhost:1313/memo/my_vim_customization_policy/</guid>
      <description>

&lt;p&gt;It is the Vim that bring we into the fantastic OSS world. Fiddling with it is
full of surprise and happy.&lt;/p&gt;

&lt;p&gt;Below records my thoughts and rules of customizing my Vim.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;About Mapping&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Good prefixes for normal mode mappings&lt;/h2&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;The comma &lt;code&gt;,&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;use 2 ~ 3 suffix characters, then we can get more candidates key combinations
for mapping.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;The backslash &lt;code&gt;\&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;different keyboard layouts have different locations for &lt;code&gt;\&lt;/code&gt;, so it should be
used less frequently than &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;The space &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;the &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; is the best prefix for normal mappings I&amp;rsquo;ve ever found. It spans
a long distance at the bottom of the keyboard, which makes it&amp;rsquo;s very easy and
comfortable to touch.&lt;/p&gt;

&lt;p&gt;currrently, I only assigned it to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kien/ctrlp.vim.git&#34;&gt;kien&amp;rsquo;s &amp;lsquo;CtrlP&amp;rsquo;&lt;/a&gt; family mappings&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Mudox/vim-omnimenu&#34;&gt;my &amp;lsquo;vim-omnimenu&amp;rsquo;&lt;/a&gt; mappings&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Mudox/vim-chameleon&#34;&gt;my &amp;lsquo;vim-chameleon&amp;rsquo;&lt;/a&gt; mappings&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;The enter &lt;code&gt;&amp;lt;Cr&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;since many vim itself and many plugin use &lt;Cr&gt;, so I should use it sparely.
when a single click of &lt;Cr&gt; is needed, you will feel a noticeable response lag.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Mapping toggling commands&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;use &lt;code&gt;co&lt;/code&gt; prefix, which is derived from &lt;a href=&#34;https://github.com/tpope/vim-unimpaired.git&#34;&gt;tpope&amp;rsquo;s &amp;lsquo;unimpaired&amp;rsquo;&lt;/a&gt; plugin.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use &lt;code&gt;,\*&amp;lt;Space&amp;gt;&lt;/code&gt; pattern, which is derived from &lt;a href=&#34;https://github.com/scrooloose/nerdcommenter.git&#34;&gt;scrooloose&amp;rsquo;s &amp;lsquo;NERD commenter&amp;rsquo;&lt;/a&gt; plugin.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SWIFT OJECT-ORIENTED FEATURE</title>
      <link>http://localhost:1313/note/swift_oo/</link>
      <pubDate>Wed, 29 Oct 2014 21:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/swift_oo/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Class Like Constructs In Swift&lt;/h1&gt;

&lt;p&gt;In Swift, &lt;code&gt;enum&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; all can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;have &lt;strong&gt;properties&lt;/strong&gt; to keep states.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;have &lt;strong&gt;methods&lt;/strong&gt; to perform actions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;define &lt;strong&gt;subscript&lt;/strong&gt; operators to let user access their properties through
subscript syntax.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;define &lt;strong&gt;initializers&lt;/strong&gt; to have a reasonable initial state.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;be &lt;strong&gt;extended&lt;/strong&gt; to have additional behaviors beyond their default implementations.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;conform to &lt;strong&gt;protocols&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Only &lt;code&gt;class&lt;/code&gt; can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;have &lt;strong&gt;inheritance&lt;/strong&gt; capability.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;have &lt;strong&gt;deinitializer&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;be &lt;strong&gt;referenced&lt;/strong&gt; by mutiple variable or constants. the &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt;
are both value types.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Properties&lt;/h1&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;stored properties&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;lazy properties&lt;/h3&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;computed properties&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;shorthand setter syntax&lt;/h3&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;shorthand read-only getter syntax&lt;/h3&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Initializers&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>JAVASCRIPT TYPE CONVERSIONS</title>
      <link>http://localhost:1313/note/javascript_type_conversions/</link>
      <pubDate>Tue, 28 Oct 2014 11:33:15 CST</pubDate>
      
      <guid>http://localhost:1313/note/javascript_type_conversions/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Sepcial Value Or Types In JavaScript&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The &lt;code&gt;undefined&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;undefined&lt;/code&gt; is the only value of &lt;code&gt;undefined&lt;/code&gt;, represents unknown value of any
other types, including primitive types &amp;amp; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// play with &#39;undefined&#39;
typeof undefiend                  /* undfeined        */
undefined == undefined            /* true             */
undefined == null                 /* true             */
undefined !== null                /* true             */
Boolean(undefined)                /* false            */
Number(undefined)                 /* NaN              */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;The &lt;code&gt;null&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;null&lt;/code&gt;, by standards, should be the only value of &lt;code&gt;null&lt;/code&gt; type, but in certain
browser (e.g. firfox, chrome), it is of type &lt;code&gt;object&lt;/code&gt;. &lt;code&gt;null&lt;/code&gt; is used to
represent unknown value of an object.&lt;/p&gt;

&lt;p&gt;It is equal to itself and it is equal to &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// play with &#39;null&#39;
typeof null                       /* object           */
null == null                      /* true             */
null == undefined                 /* true             */
null !== undefined                /* true             */
Boolean(null)                     /* false            */
Number(null)                      /* 0                */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;The &lt;code&gt;NaN&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;NaN&lt;/code&gt; is a &lt;code&gt;Number&lt;/code&gt; that can not be represented as a number.&lt;/p&gt;

&lt;p&gt;It dose &lt;strong&gt;NOT&lt;/strong&gt; equal to itself, hence JavaScript provide a built-in function
&lt;code&gt;isNaN()&lt;/code&gt; to test if a value is a NaN.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascri&#34;&gt;// play with &#39;NaN&#39;
typeof NaN                        /* number           */
NaN == NaN                        /* false            */
NaN == undefined                  /* false            */
NaN == null                       /* false            */
Boolean(NaN)                      /* false            */
Number(NaN)                       /* NaN              */
isNaN(NaN)                        /* true             */
NaN == 0/0                        /* true             */
isNaN(0/0)                        /* true             */
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Implicit Type Conversions&lt;/h1&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;When other types need to be converted into a number&lt;/h2&gt;

&lt;p&gt;When different types are mixed in a relational operation (i.e &lt;code&gt;== != &amp;lt; &amp;lt;= &amp;gt;
&amp;gt;=&lt;/code&gt;) except the &lt;code&gt;===&lt;/code&gt; operator, or an arithmetic operation, except
the &lt;code&gt;+&lt;/code&gt; operator, they would be converted into numbers first.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;For Boolean:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;true would be converted to 1&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;false would be converted to 0&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;For String:&lt;/h3&gt;

&lt;p&gt;It is converted literally, i.e.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#39;2014&#39; &amp;lt; 2 /* 2014 &amp;lt; 2 yields false */
&#39;3.1415&#39; == 3.1415 /* 3.1415 == 3.1415 yields true */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is one exception: a &lt;code&gt;emtpy&lt;/code&gt; string would be converted to 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var emptyText = &#39;&#39;;

/* &#39;emptyText&#39; here, converetd to 0, is compared to true which is converted to 1,
and then &#39;!&#39; negates the results to true */
if (!emptyText) {
  console.log(&#39;empty text is not true!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;When other types need to be converted into a string&lt;/h2&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;The special &lt;code&gt;+&lt;/code&gt; operator&lt;/h3&gt;

&lt;p&gt;In JavaScript, the &lt;code&gt;+&lt;/code&gt; is first a string concatenation operator, then a
arithmetic addition operator.&lt;/p&gt;

&lt;p&gt;When one of &lt;code&gt;+&lt;/code&gt;&amp;rsquo;s operands is a string, JavaScript will try to convert the
other operand into a string, and perform a concatenation operation.&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;For Boolean:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;true&lt;/code&gt; would be conveted bo &amp;ldquo;true&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;false&lt;/code&gt; would be conveted to &amp;ldquo;false&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;For &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; &amp;amp; &lt;code&gt;NaN&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;they all be converted literally.&lt;/p&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;When other types need to be converted into a boolean value&lt;/h2&gt;

&lt;p&gt;from 《Head Fist JavaScript Programming》:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the secret to learning what is truthy and what is falsey is to learn what’s
falsey, and then consider everything else truthy.
concentrate on  knowing what is falsey, and then everything else you can
consider truthy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;it is a golden rule that also applys in many other programming language
learning situations.&lt;/p&gt;

&lt;p&gt;As to what value should be considered as falsey, different language has
different policy. There are &lt;strong&gt;5&lt;/strong&gt; falsey value in JavaScript:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WEB PAGE LAYOUTS</title>
      <link>http://localhost:1313/note/web_page_layouts/</link>
      <pubDate>Sun, 26 Oct 2014 21:36:29 CST</pubDate>
      
      <guid>http://localhost:1313/note/web_page_layouts/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Liquid Layout&lt;/h1&gt;

&lt;p&gt;This is the browser&amp;rsquo;s default layout behavior, if you did not add any CSS to
style a page. The block elements, like liquid, just fill as much space as they
can in the pages.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Frozen Layout&lt;/h1&gt;

&lt;p&gt;By using the CSS attribute combination of &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;, we can put a
&lt;strong&gt;containing&lt;/strong&gt; block (i.e. &lt;code&gt;&amp;lt;seciton&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;) to float on to
left-most or right-most side forming a &lt;strong&gt;column&lt;/strong&gt;, and let the  remaining
content to flow around the fixed-width floating column, forming the other
column.&lt;/p&gt;

&lt;p&gt;Use CSS attribute &lt;code&gt;clear: [left | right]&lt;/code&gt; to let a block to layout fully
underneath a floating elements.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Jello Layout&lt;/h1&gt;

&lt;p&gt;On the basis of frozen layout, we can use containing fixed-width block to wrap
all columns (floating or flowing), and by using &lt;code&gt;margin-left: auto;
margin-right: auto;&lt;/code&gt; CSS style, to center the contained columns in the page.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Absolute Position&lt;/h1&gt;

&lt;p&gt;By using the CSS attribute combination of &lt;code&gt;position: [absolute | fixed]&lt;/code&gt; and
&lt;code&gt;left | right | top | bottom: ...&lt;/code&gt;, we can take the column fully out of layout
flow, and fix their position relative to the page (&lt;code&gt;position: absolute&lt;/code&gt;), or to
the viewport (&lt;code&gt;position: fixed&lt;/code&gt;).&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Table Display&lt;/h1&gt;

&lt;p&gt;Use CSS attribute &lt;code&gt;display: [table | table-row | table-cell]&lt;/code&gt; to organize HTML
elements into an invisible table.&lt;/p&gt;

&lt;p&gt;Most of the time, &lt;code&gt;vertical-align: top&lt;/code&gt; will help you to get what you want to see.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SWIFT FEATURES</title>
      <link>http://localhost:1313/note/swift_features/</link>
      <pubDate>Tue, 14 Oct 2014 21:43:56 CST</pubDate>
      
      <guid>http://localhost:1313/note/swift_features/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Powerful &lt;code&gt;switch&lt;/code&gt; Statement&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;no implicitly fallthrough&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;match multiple conditions in one case statement.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;match against range.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;match against tuple.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;value binding.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;where&lt;/code&gt; clause can provide more conditions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;break&lt;/code&gt; &amp;amp; &lt;code&gt;continue&lt;/code&gt; can &lt;em&gt;jump&lt;/em&gt; further (to some label)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var aPoint = (x: 2, y: -1)
// labeled `swtich`
// NOTE: only loop statements and &#39;switch&#39; statement can labeled.
theSwitch: switch aPoint {
// against tuple
case (0, 0):
  println(&amp;quot;origin point&amp;quot;)

// against multiple conditions separated by comma
case (1, 1), (2, 2):
  println(&amp;quot;(1, 1) or (2, 2)&amp;quot;)

// &#39;_&#39; means &#39;any value is ok&#39;
case (_, 0):
  // the `break` here is just like the `pass` in python, acting as a
  // &#39;placeholder statement&#39;, nullifing this case branch.
  break

case (0, _):
  println(&amp;quot;on the Y-axis&amp;quot;)

// against range
case (-2...2, -2...2):
  println(&amp;quot;on or in the 2x2 box&amp;quot;)

// value binding
case (let x, -1):
  println(&amp;quot;on the horizontal line y = -1, with a x value: \(x)&amp;quot;)

// where clause
// NOTE: `let` can be replaced with `var` if you need to change the bound
// value afterwards.
case (0, var y) where y &amp;gt;= 0:
  y++    // mutable
  println(&amp;quot;on the 1st or 2nd quadrant&amp;quot;)

// value binding as a whole, which is an required exhaustive match
case let (x, y):
  theLoop: for i in 1..&amp;lt;100 {
    switch i {
      case let x where (x &amp;amp; 1) == 1 // a odd number
        break theSwitch     // jump further
      default
        continue theLoop    // jump further
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Closure &amp;ndash; Too Much Sugar!&lt;/h1&gt;

&lt;p&gt;The closure in Swift language adopts many syntactic sugar.&lt;/p&gt;

&lt;p&gt;The basic full syntax of a closure is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;{
  (parameters) -&amp;gt; retrunType in
  ... statements ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example that uses the array&amp;rsquo;s method &lt;code&gt;sorted&lt;/code&gt; to sort an array of word.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var words = [ &amp;quot;Dolor&amp;quot;, &amp;quot;eum&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;suscipit&amp;quot;, &amp;quot;necessitatibus&amp;quot;, &amp;quot;quod&amp;quot;, &amp;quot;hic&amp;quot;, &amp;quot;dignissimos&amp;quot; ]
 
let sortedWords = words.sorted({
  (lhs: String, rhs: String) -&amp;gt; Bool in
  return lhs &amp;lt; rhs
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Sugar #0 &amp;ndash; trailing closure&lt;/h2&gt;

&lt;p&gt;Often, closure parameter is placed last in parameter list. Swift thus provides
&lt;strong&gt;trailing closure&lt;/strong&gt;, which means your can write the inline closure just
outside the parameter list, following the closing &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Futhermore, if the closure is the only parameter, then the parenthesis can be
omitted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// trailing closure
let sortedWords = words.sorted/*()*/ {
  (lhs: String, rhs: String) -&amp;gt; Bool in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Sugar #1 &amp;ndash; return type inference&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;return type&lt;/strong&gt; can be inferred by swift compiler.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit return type
let sortedWords = words.sorted {
  (lhs: String, rhs: String) /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Sugar #2 &amp;ndash; parameter type inference&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;parameter types&lt;/strong&gt; can be inferred by swift compile as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit parameter types
let sortedWords = words.sorted {
  (lhs/*: String*/, rhs/*: String*/) /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Sugar #3 &amp;ndash; parenthesis-less&lt;/h2&gt;

&lt;p&gt;since no type annotation is needed, the &lt;strong&gt;parenthesis&lt;/strong&gt; can be omitted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit parenthesis
let sortedWords = words.sorted {
  /*(*/lhs/*: String*/, rhs/*: String)*/ /*-&amp;gt; Bool*/ in
  return lhs &amp;lt; rhs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Sugar #4 &amp;ndash; return statemetn inference&lt;/h2&gt;

&lt;p&gt;If the closure has one statement, then the &lt;strong&gt;return&lt;/strong&gt; statement can also be
inferred.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// omit &#39;return&#39;
let sortedWords = words.sorted {
  /*(*/lhs/*: String*/, rhs/*: String)*/ /*-&amp;gt; Bool*/ in
  /*return*/ lhs &amp;lt; rhs
}

//then we got:
let sortedWords = words.sorted { lhs, rhs in lhs &amp;lt; rhs }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Sugar #5 &amp;ndash; shorthand parameter name&lt;/h2&gt;

&lt;p&gt;Swift provides &lt;strong&gt;shorthand parameter names&lt;/strong&gt;: $0 for the 1st parameter, $1 for
the 2nd parameter, and so on. And as an side effect, the whole &lt;code&gt;(parameters) -&amp;gt;
returType in&lt;/code&gt; statment can be completely omitted&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// use shorthand parameters, omit the whole &#39;in&#39; statement
let sortedWords = words.sorted {
  /*(lhs: String, rhs: String) -&amp;gt; Bool in*/
  /*return*/ $0 &amp;lt; $1
}

// then we got:
let sortedWords = words.sorted { $0 &amp;lt; $1 }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Sugar #6 &amp;ndash; operater as a closure&lt;/h2&gt;

&lt;p&gt;In swift, &lt;strong&gt;operator&lt;/strong&gt; is a function, which in turn is a special closure, so&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// comes operator!
let sortedWords = words.sorted(&amp;lt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_9&#34;&gt;Fully-fledged Enumeration&lt;/h1&gt;

&lt;p&gt;In Swift, enumeration is fully-fledged type. You can asssociate different data
with each enumeration memeber, or define a raw type for enumeration.&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;Flexible definition syntax&lt;/h2&gt;

&lt;p&gt;you can define more than one member a line.&lt;/p&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;Type inference&lt;/h2&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Associated Value&lt;/h2&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;Raw type&lt;/h2&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Struct like enumeration&lt;/h2&gt;

&lt;p&gt;enumeration in Swift can have properties &amp;amp; methods.&lt;/p&gt;

&lt;p&gt;enumeration, like struct in Swift, is value type (while class is reference
acounted type).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ABOUT ME</title>
      <link>http://localhost:1313/post/about/</link>
      <pubDate>Thu, 02 Oct 2014 03:56:39 CST</pubDate>
      
      <guid>http://localhost:1313/post/about/</guid>
      <description>&lt;p&gt;Hi, I&amp;rsquo;m Mudox.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GIT MISC</title>
      <link>http://localhost:1313/note/git/</link>
      <pubDate>Thu, 02 Oct 2014 03:36:12 CST</pubDate>
      
      <guid>http://localhost:1313/note/git/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;Alias&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;working tree, working directory&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;index, staging area, cache, staged snapshot&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;commit[ted] history, commit[ted] snapshot&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;The &lt;code&gt;add&lt;/code&gt; &amp;amp; &lt;code&gt;rm&lt;/code&gt; &amp;amp; &lt;code&gt;reset&lt;/code&gt; &amp;amp; &lt;code&gt;commit&lt;/code&gt; &amp;amp; &lt;code&gt;checkout&lt;/code&gt; Sub-commands.&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;between the &lt;em&gt;committed history&lt;/em&gt; &amp;amp; &lt;em&gt;staging area&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;commit&lt;/code&gt; submit changes from &lt;em&gt;staging area&lt;/em&gt; to &lt;em&gt;committed history&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;reset&lt;/code&gt; revert changes from &lt;em&gt;committed history&lt;/em&gt; back to &lt;em&gt;staging area&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;between the &lt;em&gt;staging area&lt;/em&gt; &amp;amp; &lt;em&gt;working tree&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;add&lt;/code&gt; submit changes from &lt;em&gt;working tree&lt;/em&gt; to &lt;em&gt;staging area&lt;/em&gt;, preparing
for committing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt; remove file(s) from &lt;em&gt;stageing area&lt;/em&gt;, so they become &lt;em&gt;untracked&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;checkout&lt;/code&gt; restore changes from staging area or a specific commit of committed
history to &lt;em&gt;working directory&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;unstages&lt;/strong&gt; changes in staging area.
v
    git reset &lt;paths&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;or, if you ask for more, &lt;strong&gt;uncommits&lt;/strong&gt; changes in history.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset &amp;lt;commit-ish&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;untracks&lt;/strong&gt; file(s) previously tracked in staging area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm --cache &amp;lt;paths&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;or, if you ask for more, &lt;strong&gt;removes&lt;/strong&gt; file(s) in the work directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm &amp;lt;paths&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt; vs &lt;code&gt;git checkout&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit-ish&amp;gt; &amp;lt;paths&amp;gt;&lt;/code&gt; only update &lt;em&gt;staging area&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout &amp;lt;paths&amp;gt;&lt;/code&gt; fetch &lt;code&gt;&amp;lt;paths&amp;gt;&lt;/code&gt; from &lt;em&gt;staging area&lt;/em&gt; to working
direcotry.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit-ish&amp;gt;&lt;/code&gt; fetch &lt;code&gt;&amp;lt;paths&amp;gt;&lt;/code&gt; from &lt;em&gt;history&lt;/em&gt; to both
&lt;em&gt;index&lt;/em&gt; &amp;amp; &lt;em&gt;working direcotry&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;The &lt;code&gt;git Rebase&lt;/code&gt; Sub-command&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Advantage of &lt;code&gt;rebase&lt;/code&gt;:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;no additional merge commit&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;linear commit history&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Disadvantage of &lt;code&gt;rebase&lt;/code&gt;:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;safety&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tracability: the evidences of merging are wiped away.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Golden rule of &lt;code&gt;git rebase&lt;/code&gt;:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;never&lt;/strong&gt; use it on &lt;strong&gt;public&lt;/strong&gt; branches.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;When to use &lt;code&gt;rebase&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Local cleanup&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Incorporating upstream changes into a feature branch&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integrating a approved feature&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;The &lt;code&gt;reset&lt;/code&gt;, &lt;code&gt;checkout&lt;/code&gt; And &lt;code&gt;revert&lt;/code&gt; Sub-commands&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;The parameters that you pass to &lt;code&gt;git reset&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; determine
their scope. When you don’t include a &lt;strong&gt;&amp;lt;file path&amp;gt;&lt;/strong&gt; as a parameter, they
operate on whole commits.  Note that git revert has no file-level counterpart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;from &lt;a href=&#34;https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/commit-level-operations&#34;&gt;atlassian&amp;rsquo;s git tutorials&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Commit level operations&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git reset --[soft | mixed | hard] &amp;lt;commit-ish&amp;gt;&lt;/code&gt; &lt;strong&gt;move&lt;/strong&gt; branch tips backwards
or even forwards, while affecting &lt;em&gt;staging area&lt;/em&gt; &amp;amp; &lt;em&gt;working direcotry&lt;/em&gt; according to
options it is given.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;option&lt;/th&gt;
&lt;th&gt;history&lt;/th&gt;
&lt;th&gt;staging area&lt;/th&gt;
&lt;th&gt;working directory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--soft&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--mixed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--hard&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit-ish&amp;gt;&lt;/code&gt; dose not move tips around.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git revert&lt;/code&gt; undo commits by adding a new commit. it is a safe (reversible) way
to undo commits, while &lt;code&gt;git reset&lt;/code&gt; is dangerous (irreversible) way to undo
commits.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;File level operations&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git [reset|checkout] &amp;lt;commit-ish&amp;gt; &amp;lt;pathspec&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;history&lt;/th&gt;
&lt;th&gt;staging area&lt;/th&gt;
&lt;th&gt;working directory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;toc_10&#34;&gt;Summary&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;commit level&lt;/th&gt;
&lt;th&gt;file level&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;discard commits in private branches or throw away uncommited changes&lt;/td&gt;
&lt;td&gt;unstage a file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;checkout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;swtich between branches or inspect old snapshots&lt;/td&gt;
&lt;td&gt;discard changes in the working directory&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;revert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;undo commits in public branches&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;N/A&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>