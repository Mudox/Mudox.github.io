<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mudox</title>
    <link>http://mudox.github.io/post/</link>
    <description>Recent content in Posts on Mudox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Sep 2018 16:10:16 +0800</lastBuildDate>
    
	<atom:link href="http://mudox.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Objects</title>
      <link>http://mudox.github.io/post/git-objects/</link>
      <pubDate>Wed, 12 Sep 2018 16:10:16 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/git-objects/</guid>
      <description>Git Object Database A git repository is essentially a key-value database, where the value is a git object and the key is a SHA-1 value which is is assigned to each value when firstly added into the database. 4 Kinds Of Git Objects TL;DR A tree (like directories in file systems) as a directory save metadata and address (the SHA-1 keys) to contained blob objects as well as sub-trees. A</description>
    </item>
    
    <item>
      <title>GitHub Credential Types</title>
      <link>http://mudox.github.io/post/github-credential-types/</link>
      <pubDate>Thu, 06 Sep 2018 02:34:27 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/github-credential-types/</guid>
      <description>3 Roles OAuth App Owner The one who registered the app as GitHub OAuth app in the New OAuth App page. After the registration, the owner will get a key and secret (a.k.a. client ID and client secret) pair which identifying the registered app in GitHub. Often they are kept on the company&amp;rsquo;s server.
OAuth App User The app&amp;rsquo;s end users, they need to provide their GitHub account credentials, that is a username+password pair, in order to login to GitHub service.</description>
    </item>
    
    <item>
      <title>iOS Dev Q&amp;A</title>
      <link>http://mudox.github.io/post/ios-dev-qa/</link>
      <pubDate>Sat, 25 Aug 2018 20:57:08 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/ios-dev-qa/</guid>
      <description>Uncategorized Mix String and NSString in NSRegularExpression methods is error prone.
String use UTF8 coding (it see characters with variable lengths) while NSString uses UTF16 behind (it sees characters all occupying 2 bytes).
For example, an emoji character counts as 2 UTF16 code points in NSString, but count as 1 Unicode EGC (Extended Grapheme Cluster)code point in String.
let s = &amp;#34;ðŸŒ¹&amp;#34; s.count // 1 let ss = s as NSString ss.</description>
    </item>
    
    <item>
      <title>RxSwift Operators - Creation</title>
      <link>http://mudox.github.io/post/rxswift-operators---creation/</link>
      <pubDate>Fri, 10 Aug 2018 16:36:06 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/rxswift-operators---creation/</guid>
      <description>Create Sequences Programmatically Although the RxSwift framework, combined with RxCocoa, provides a bunch of common and qualified predefined observables, the 2 operators in the this section provides the most fundamental yet flexible way to get a observable.
+create You bury into the parameter block the sequence emitting blueprint as well as necessary sequence tear-down details, then on subscription the sequence gets spawned as whatever you designed.
let seq = Observable&amp;lt;Int&amp;gt;.</description>
    </item>
    
    <item>
      <title>RxSwift Operators - Error Handling</title>
      <link>http://mudox.github.io/post/rxswift-operators---error-handling/</link>
      <pubDate>Fri, 10 Aug 2018 00:42:04 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/rxswift-operators---error-handling/</guid>
      <description>How To Error Out in RxSwift Generally there are 3 ways to terminate current sequence with an error.
 Create a special observable that emits nothing but an error Observable.error(someError).
class LocationService { enum Error: Swift.Error { ... case serviceDisabled ... } func startLocationUpdating() -&amp;gt; Observable&amp;lt;Location&amp;gt; { guard CLLocationManager.locationServiceEnabled else { return .error(Error.serviceDisabled)  } ... } } Emit an error event to the observer parameter in an Observable&amp;lt;T&amp;gt;.create block parameter observer.</description>
    </item>
    
    <item>
      <title>My Web Awesome List</title>
      <link>http://mudox.github.io/post/my-web-awesome-list/</link>
      <pubDate>Sun, 05 Aug 2018 15:48:22 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/my-web-awesome-list/</guid>
      <description> Fonts Dollar  A functional tool-belt for Swift Language.   </description>
    </item>
    
    <item>
      <title>Alternating Sidebar Menu</title>
      <link>http://mudox.github.io/post/alternating-sidebar-menu/</link>
      <pubDate>Thu, 02 Aug 2018 01:15:03 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/alternating-sidebar-menu/</guid>
      <description>Title Content.</description>
    </item>
    
    <item>
      <title>Site Building - Notes</title>
      <link>http://mudox.github.io/post/site-building---notes/</link>
      <pubDate>Mon, 30 Jul 2018 04:39:04 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/site-building---notes/</guid>
      <description>Tooling Hugo is the static site generator I use. It is known as programmer&amp;rsquo; s site generator. It renders fast while providing sufficient flexibility for users to tweak every aspect of the site.
Its live reloading feature reloads currently opened page to immediately reflect your changes made in the source files. Suppose you have 2 display monitors, one for editor, the other shows the browser &amp;hellip;
Neovim + Tmux + iTerm2 provides the &amp;ldquo;IDE&amp;rdquo; environment.</description>
    </item>
    
    <item>
      <title>Unburden View Controller</title>
      <link>http://mudox.github.io/post/unburden-view-controller/</link>
      <pubDate>Sun, 29 Jul 2018 04:57:59 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/unburden-view-controller/</guid>
      <description>The Evolution Story I guess at the very beginning of GUI app architecture evolution, there might be only 2 layers:
 View layer for displaying data model states, views just fetching data from model layer, perform some simple but necessary formatting and then show them out.
 Model layer for store and manipulating data
  As the program evolves, a new layer View Controller was brought up to relief of views before their source files become too huge.</description>
    </item>
    
    <item>
      <title>Auto Highlighting TOC</title>
      <link>http://mudox.github.io/post/auto-highlighting-toc/</link>
      <pubDate>Tue, 24 Jul 2018 08:45:42 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/auto-highlighting-toc/</guid>
      <description>Before Everything The static site generator Hugo I used in for this site auto-generates TOC for each article. The rendered TOC html DOM structure is like:
&amp;lt;aside class=&amp;#34;sidebar right-sidebar&amp;#34;&amp;gt; &amp;lt;header&amp;gt; &amp;lt;h2&amp;gt; &amp;lt;i class=&amp;#34;fas fa-list&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;span&amp;gt;CONENTS&amp;lt;/span&amp;gt; &amp;lt;/h2&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;nav id=&amp;#34;TableOfContents&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;!--...--&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#data&amp;#34;&amp;gt;Heading 1&amp;lt;/a&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#realm&amp;#34;&amp;gt;Heading 1.1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#realm&amp;#34;&amp;gt;Heading 1.2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;!--...--&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;!--...--&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/aside&amp;gt; It basically scans the article body part for headings (h1 h2 h3 h4 .</description>
    </item>
    
    <item>
      <title>Fixed Sidebar</title>
      <link>http://mudox.github.io/post/fixed-sidebar/</link>
      <pubDate>Sun, 13 May 2018 08:45:12 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/fixed-sidebar/</guid>
      <description>Title Content.</description>
    </item>
    
    <item>
      <title>Site Building - Howtos</title>
      <link>http://mudox.github.io/post/site-building---howtos/</link>
      <pubDate>Tue, 17 Apr 2018 22:09:38 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/site-building---howtos/</guid>
      <description>Uncategorised 2018-08 How to express {{&amp;lt; highlight &amp;gt;}}?
Write &amp;lt;code&amp;gt;{{&amp;amp;lt; highlight &amp;amp;gt;}}&amp;lt;/code&amp;gt;.
How control word casing?
Use text-transform: [capitalize|uppercase|lowercase|...] to control text casing. Better render the text in all lowercase from template.
The text-transform property should be applied to the immediate containing element the text.
How to style a &amp;lt;hr&amp;gt;
The horizontal ruler element is just a ordinary block element with no inner content (text). By default, their border-bottom is styled in be a 1px solid black line.</description>
    </item>
    
    <item>
      <title>Site Building - Issues</title>
      <link>http://mudox.github.io/post/site-building---issues/</link>
      <pubDate>Thu, 05 Apr 2018 22:09:44 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/site-building---issues/</guid>
      <description>Uncategorised 2018-08 When using Hugo shortcode highlight to generate code blocks, there always a trailing empty line?
Dedent the ending {{&amp;lt; / highlight &amp;gt;}} to make sure there is no whitespace in the head of the line.
Live reloading does not bring the latest change to browser?
Google Chrome -&amp;gt; open Devtools window -&amp;gt; click Network tab -&amp;gt; check Disable cache box. Keep the window open during the testing.</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>http://mudox.github.io/post/resume/</link>
      <pubDate>Sun, 28 Jan 2018 04:55:06 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/resume/</guid>
      <description>My name is Mudox.
I&amp;rsquo;m an iOS developer.</description>
    </item>
    
    <item>
      <title>My Projects</title>
      <link>http://mudox.github.io/post/my-projects/</link>
      <pubDate>Tue, 26 Dec 2017 04:59:53 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/my-projects/</guid>
      <description>Here list out all my projects.</description>
    </item>
    
    <item>
      <title>Theme Demo</title>
      <link>http://mudox.github.io/post/theme-demo/</link>
      <pubDate>Thu, 07 Dec 2017 19:00:55 +0800</pubDate>
      
      <guid>http://mudox.github.io/post/theme-demo/</guid>
      <description>Heading #1 The worldâ€™s fastest framework for building websites
Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.
Heading #2 Nam pretium faucibus ipsum, sit amet tincidunt augue vulputate nec. Donec consectetur sit amet justo vel vehicula. Fusce quis tempor felis. Maecenas viverra pulvinar sodales. Cras a hendrerit libero. Sed imperdiet non mauris luctus facilisis.</description>
    </item>
    
  </channel>
</rss>